<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Michael's Blog]]></title>
  <subtitle><![CDATA[Stay foolish, Stay hungry, Learning, Sharing, Growing.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tangxin.club//"/>
  <updated>2015-07-18T06:21:49.112Z</updated>
  <id>http://tangxin.club//</id>
  
  <author>
    <name><![CDATA[Michael]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://tangxin.club/2015/07/18/java%E5%9F%BA%E7%A1%80-13%E8%8E%B7%E5%8F%96%E4%BB%8A%E5%90%8E%E5%A4%9A%E5%B0%91%E5%A4%A9%E5%90%8E%E7%9A%84%E6%97%A5%E6%9C%9F/"/>
    <id>http://tangxin.club/2015/07/18/java基础-13获取今后多少天后的日期/</id>
    <published>2015-07-18T06:21:49.112Z</published>
    <updated>2015-07-18T06:21:49.112Z</updated>
    <content type="html"><![CDATA[<hr>
<p>|-<br>获取今后多少天后的日期 ===</p>
<h2 id="java_/**_*_Get_the_date_some_days_later-_*_@param_year_the_year_*_@param_month_month_of_the_year_*_@param_day_day_of_the_month_*_@return_if_the_parameter_is_illegal_this_will_return_null_*/_@SuppressLint(&quot;SimpleDateFormat&quot;)_private_static_String_getClosingDate(int_year,_int_month,_int_day)_{_final_int_internalDay_=_31;_final_String_pattern_=_&quot;yyyy-MM-dd&quot;;_DateFormat_dateFormat_=_new_SimpleDateFormat(pattern);_Date_closingDate;_try_{_Calendar_thisDay_=_Calendar-getInstance();_thisDay-set(Calendar-YEAR,_year);_thisDay-set(Calendar-MONTH,_month_-_1);//_the_first_month_of_the_year_is_0-_thisDay-set(Calendar-DAY_OF_MONTH,_day);_thisDay-add(Calendar-DAY_OF_MONTH,_internalDay);_closingDate_=_thisDay-getTime();_}_catch_(Exception_e)_{_e-printStackTrace();_return_null;_}_return_dateFormat-format(closingDate);_}"><code>java /** * Get the date some days later. * @param year the year * @param month month of the year * @param day day of the month * @return if the parameter is illegal this will return null */ @SuppressLint(&quot;SimpleDateFormat&quot;) private static String getClosingDate(int year, int month, int day) { final int internalDay = 31; final String pattern = &quot;yyyy-MM-dd&quot;; DateFormat dateFormat = new SimpleDateFormat(pattern); Date closingDate; try { Calendar thisDay = Calendar.getInstance(); thisDay.set(Calendar.YEAR, year); thisDay.set(Calendar.MONTH, month - 1);// the first month of the year is 0. thisDay.set(Calendar.DAY_OF_MONTH, day); thisDay.add(Calendar.DAY_OF_MONTH, internalDay); closingDate = thisDay.getTime(); } catch (Exception e) { e.printStackTrace(); return null; } return dateFormat.format(closingDate); }</code></h2><p>title: Java基础-01.Git命令.md categories: Java</p>
<ul>
<li>邮箱 ：charon.chui@gmail.com  </li>
<li>Good Luck!</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>|-<br>获取今后多少天后的日期 ===</p>
<h2 id="java_/**_*_Get_the_date_some_days_later-_*_@param_year_the_year_*_@param_month_month_of_the_year_*]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tangxin.club/2015/07/18/Java%E5%9F%BA%E7%A1%80-02.MD5%E5%8A%A0%E5%AF%86/"/>
    <id>http://tangxin.club/2015/07/18/Java基础-02.MD5加密/</id>
    <published>2015-07-18T06:17:41.781Z</published>
    <updated>2015-07-18T06:17:41.781Z</updated>
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>-<br>MD5加密 ===</p>
</blockquote>
<p><code>MD5</code>是一种不可逆的加密算法只能将原文加密，不能讲密文再还原去，原来把加密后将这个数组通过<code>Base64</code>给变成字符串，<br>这样是不严格的业界标准的做法是对其加密之后用每个字节<code>&amp;15</code>然后就能得到一个<code>int</code>型的值，再将这个<code>int</code>型的值变成16进制的字符串.虽然MD5不可逆，<br>但是网上出现了将常用的数字用<code>md5</code>加密之后通过数据库查询，所以<code>MD5</code>简单的情况下仍然可以查出来，一般可以对其多加密几次或者<code>&amp;15</code>之后再和别的数运算等，<br>这称之为<em>加盐</em>.</p>
<figure class="highlight java"><figcaption><span>public class MD5Utils &#123;</span><a href="/**">* md5加密的工具方法 */ public static String</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">encode(String password)&#123; <span class="keyword">try</span> &#123; MessageDigest digest</span><br><span class="line">= MessageDigest.getInstance(<span class="string">"md5"</span>); <span class="keyword">byte</span>[] result</span><br><span class="line">= digest.digest(password.getBytes()); StringBuilder sb = <span class="keyword">new</span></span><br><span class="line">StringBuilder();<span class="comment">//有的数很小还不到10所以得到16进制的字符串有一个 //的情况，这里对于小于10的值前面加上0</span></span><br><span class="line"><span class="comment">//16进制的方式  把结果集byte数组 打印出来 for(byte b :result)&#123; int number = (b&amp;0xff);//加盐.</span></span><br><span class="line">String str =Integer.toHexString(number); <span class="keyword">if</span>(str.length()==<span class="number">1</span>)&#123; sb.append(<span class="string">"0"</span>);</span><br><span class="line">&#125; sb.append(str); &#125; <span class="keyword">return</span> sb.toString(); &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e)</span><br><span class="line">&#123; e.printStackTrace(); <span class="keyword">return</span> <span class="string">""</span>; &#125; &#125; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="-">-</h2><p>title: Java基础-01.Git命令.md categories: Java</p>
<ul>
<li>邮箱 ：charon.chui@gmail.com  </li>
<li>Good Luck!</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<blockquote>
<p>-<br>MD5加密 ===</p>
</blockquote>
<p><code>MD5</code>是一种不可逆的加密算法只能将原文加密，不能讲密文再还原去，原来把加密后将这个数组通过<code>Base64</code>给变成字符串]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tangxin.club/2015/07/18/java%E5%9F%BA%E7%A1%80-12%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://tangxin.club/2015/07/18/java基础-12网络请求相关内容总结/</id>
    <published>2015-07-18T06:10:15.371Z</published>
    <updated>2015-07-18T05:52:38.202Z</updated>
    <content type="html"><![CDATA[<h1 id="网络请求相关内容总结">网络请求相关内容总结</h1><p>网络数据传输，熟悉多线程、Socket网络编程、熟悉TCP、UDP、HTTP等协议</p>
<ul>
<li><p>网络编程概述：       </p>
<ul>
<li>网络模型：      <ul>
<li>OSI模型      <ul>
<li>应用层      </li>
<li>表示层     </li>
<li>会话层      </li>
<li>传输层      </li>
<li>网络层       </li>
<li>数据连接层        </li>
<li>物理层       </li>
</ul>
</li>
<li>TCP/IP模型       <ul>
<li>应用层       </li>
<li>传输层         </li>
<li>网际层      </li>
<li>主机至网络层      </li>
</ul>
</li>
</ul>
</li>
<li>网络通讯要素      <ul>
<li>IP地址    </li>
<li>端口号      </li>
<li>传输协议   </li>
</ul>
</li>
<li>网络通讯前提：   <ul>
<li>找到对方IP        </li>
<li>数据要发送到指定端口。为了标示不同的应用程序，所以给这些网络应用程序都用数字进行标示这个表示就叫端口      </li>
<li>定义通信规则。这个规则称为通信协议，国际组织定义了通用协议TCP/IP       </li>
</ul>
</li>
</ul>
</li>
<li><p>TCP和UDP的区别：      </p>
<ul>
<li>UDP协议：<br>  面向无连接<br>  每个数据报的大小在限制在64k内<br>  因为是面向无连接，所以是不可靠协议<br>  不需要建立连接，速度快      </li>
<li><p>TCP协议：<br>  必须建立连接，形成传输数据的通道<br>  在连接中可进行大数据量传输<br>  通过三次握手完成连接，是可靠协议<br>  必须建立连接，效率会稍低        </p>
<p>  三次握手：        </p>
<ul>
<li>第一次：我问你：在么？       </li>
<li>第二次：你回答：在。           </li>
<li>第三次：我反馈：哦，我知道你在。         </li>
</ul>
</li>
</ul>
</li>
<li><p>Socket：        </p>
<ul>
<li>Socket就是为网络服务提供的一种机制        </li>
<li>通信的两端都有Socket       </li>
<li>网络通信其实就是Socket间的通信      </li>
<li>数据在两个Socket间通过IO传输         </li>
<li>玩Socket主要就是记住流程，代码查文档就行             </li>
</ul>
</li>
<li><p>UDP(User Datagram Protocol)：用户数据协议            </p>
<ul>
<li>UDP概述：<br>  需要DatagramSocket与DatagramPacket对象来实现UDP协议传输数据<br>  UDP协议是一种面向无连接的协议。面向无连接的协议指的是正式通信前不必与对方先建立连接，不管对方连接状态就直接发送数据。     </li>
<li>UDP协议开发步骤：     <ul>
<li>发送端：         <ul>
<li>建立DatagramSocket服务；          </li>
<li>提供数据，并将数据封装到字节数组中；       </li>
<li>创建DatagramPacket数据包，并把数据封装到包中，同时指定接收端IP和接收端口       </li>
<li>通过Socket服务，利用send方法将数据包发送出去；       </li>
<li>关闭DatagramSocket和DatagramPacket服务。        </li>
</ul>
</li>
<li>接收端：           <ul>
<li>建立DatagramSocket服务，并监听一个端口；         </li>
<li>定义一个字节数组和一个数据包，同时将数组封装进数据包；          </li>
<li>DatagramPacket的receive方法，将接收的数据存入定义好的数据包；      </li>
<li>通过DatagramPacke关闭的方法，获取发送数据包中的信息；       </li>
<li>关闭DatagramSocket和DatagramPacket服务。       </li>
</ul>
</li>
</ul>
</li>
<li><p>UDP协议的Demo(必须掌握)：    </p>
<ul>
<li><p>发送端：      </p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UDPSend</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">		<span class="keyword">byte</span>[] buf = <span class="string">"这是UDP发送端"</span>.getBytes();</span><br><span class="line">		DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(</span><br><span class="line">			buf,buf.length,InetAddress.getByName(<span class="string">"192.168.1.253"</span>),<span class="number">10000</span>);</span><br><span class="line">		ds.send(dp);</span><br><span class="line">		ds.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收端</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UDPRece</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10000</span>);</span><br><span class="line">		<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf,buf.length);</span><br><span class="line">		ds.receive(dp);<span class="comment">//将发送端发送的数据包接收到接收端的数据包中</span></span><br><span class="line">		String ip = dp.getAddress().getHosyAddress();<span class="comment">//获取发送端的ip</span></span><br><span class="line">		String data = <span class="keyword">new</span> String(dp.getData(),<span class="number">0</span>,dp.getLength());<span class="comment">//获取数据</span></span><br><span class="line">		<span class="keyword">int</span> port = dp.getPort();<span class="comment">//获取发送端的端口号</span></span><br><span class="line">		sop(ip+<span class="string">":"</span>+data+<span class="string">":"</span>+port);</span><br><span class="line">		ds.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>TCP/IP协议：Socket和ServerSocket        </p>
<ul>
<li>基于TCP协议的网络通信概述：        <ul>
<li>TCP/IP通信协议是一种必须建立连接的可靠的网络通信协议。它在通信两端各建立一个Socket,从而在通信的两端之间形成网络虚拟链路。      </li>
<li>网络虚拟链路一旦建立，两端的程序就可以进行通信。    </li>
</ul>
</li>
<li><p>TCP/IP协议开发步骤：       </p>
<ul>
<li>客户端：       <ul>
<li>建立Socket服务，并指定要连接的主机和端口；      </li>
<li>获取Socket流中的输出流OutputStream，将数据写入流中，通过网络发送给服务端；          </li>
<li>获取Socket流中的输出流InputStream，获取服务端的反馈信息；         </li>
<li>关闭资源。          </li>
</ul>
</li>
<li>服务端：      <ul>
<li>建立ServerSocket服务，并监听一个端口；         </li>
<li>通过ServerSocket服务的accept方法，获取Socket服务对象；        </li>
<li>使用客户端对象的读取流获取客户端发送过来的数据；          </li>
<li>通过客户端对象的写入流反馈信息给客户端；         </li>
<li>关闭资源        </li>
</ul>
</li>
</ul>
</li>
<li><p>TCP/IP协议的一个Demo(必须要掌握！)：          </p>
<ul>
<li><p>客户端：     </p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Socket s = <span class="keyword">new</span> Socket(<span class="string">"192.168.1.253"</span>,<span class="number">10000</span>);</span><br><span class="line">		OutputStream os = s.getOutputStream();</span><br><span class="line">		out.write(<span class="string">"这是TCP发送的数据"</span>.getBytes());</span><br><span class="line">		s.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务端：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line">		Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">		String ip = s.getInetAddress().getHostAddress();</span><br><span class="line">		sop(ip);</span><br><span class="line"></span><br><span class="line">		InputStream is = s.getInputStream();</span><br><span class="line">		<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len = is.read(buf);</span><br><span class="line">		sop(<span class="keyword">new</span> String(buf,<span class="number">0</span>,len));</span><br><span class="line">		s.close();</span><br><span class="line">		ss.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>HTTP协议：<ul>
<li>HTTP是Hyper Text Transfer Protocol的缩写</li>
<li>是由W3C制定和维护的。目前版本为1.0和1.1</li>
<li>是开发web的基石，非常地重要</li>
<li>版本<ul>
<li>1.0版本：是无状态的协议，即一次连接只响应一次请求，响应完了就关闭此次连接要想再访问须重新建立连接。而连接都是比较耗资源的。</li>
<li>1.1版本：是有状态的协议。即可以在一次网络连接基础上发出多次请求和得到多次的响应。当距离上次请求时间过长时，服务器会自动断掉连接，这就是超时机制。</li>
</ul>
</li>
<li>HTTP协议的组成：        <ul>
<li>请求部分：         <ul>
<li>请求行：           <ul>
<li>GET / HTTP/1.1  包含：请求方式GET 请求的资源路径：/ 协议版本号：HTTP/1.1             <ul>
<li>请求方式。常用的有GET、POST            <ul>
<li>GET方式：默认方式。直接输入的网址。           <ul>
<li>表单数据出现在请求行中。url?username=abc&amp;password=123          </li>
<li>特点：不安全；有长度限制：&lt;1k           </li>
</ul>
</li>
<li>POST方式：可以通过表单form method=”post”设置           <ul>
<li>表单数据会出现在正文中。           </li>
<li>特点：安全；没有长度限制              </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>请求消息头：           </li>
<li>请求正文：第一个空行之后的全部都是请求正文             </li>
</ul>
</li>
<li>响应部分：            <ul>
<li>响应行：          <ul>
<li>HTTP/1.1 200 OK    包含：协议版本号:HTTP/1.1 响应码:200 描述:OK              <ul>
<li>响应码：(实际用到的30个左右,其他都是W3C保留的)              </li>
<li>描述：对响应码的描述             </li>
<li>常用响应码：            <ul>
<li>200：一切正常            </li>
<li>302/307:请求的资源路径变更了            </li>
<li>304：资源没有被修改过         </li>
<li>404：资源不存在,找不到资源           </li>
<li>500：服务器程序有错             </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>响应消息头：       </li>
<li>响应正文：           <ul>
<li>第一个空行之后的全部都是响应正文，浏览器显示的就是正文中的内容</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>邮箱 ：charon.chui@gmail.com  </li>
<li>Good Luck! </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="网络请求相关内容总结">网络请求相关内容总结</h1><p>网络数据传输，熟悉多线程、Socket网络编程、熟悉TCP、UDP、HTTP等协议</p>
<ul>
<li><p>网络编程概述：       </p>
<ul>
<li>网络模型：      <ul>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tangxin.club/2015/07/18/Java%E5%9F%BA%E7%A1%80-09.%E6%AD%BB%E9%94%81/"/>
    <id>http://tangxin.club/2015/07/18/Java基础-09.死锁/</id>
    <published>2015-07-18T06:09:45.995Z</published>
    <updated>2015-07-18T05:52:38.199Z</updated>
    <content type="html"><![CDATA[<h1 id="死锁">死锁</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 死锁的原因就是同步的嵌套</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> PrintRunnable(<span class="keyword">true</span>));</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> PrintRunnable(<span class="keyword">false</span>));</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line">	<span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">	PrintRunnable(<span class="keyword">boolean</span> flag) &#123;</span><br><span class="line">		<span class="keyword">this</span>.flag = flag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="keyword">synchronized</span> (MyLock.locka) &#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName()</span><br><span class="line">							+ <span class="string">"...if locka "</span>);</span><br><span class="line">					<span class="keyword">synchronized</span> (MyLock.lockb) &#123;</span><br><span class="line">						System.out.println(Thread.currentThread().getName()</span><br><span class="line">								+ <span class="string">"..if lockb"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="keyword">synchronized</span> (MyLock.lockb) &#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName()</span><br><span class="line">							+ <span class="string">"..else lockb"</span>);</span><br><span class="line">					<span class="keyword">synchronized</span> (MyLock.locka) &#123;</span><br><span class="line">						System.out.println(Thread.currentThread().getName()</span><br><span class="line">								+ <span class="string">".....else locka"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>邮箱 ：charon.chui@gmail.com  </li>
<li>Good Luck! </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="死锁">死锁</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</sp]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tangxin.club/2015/07/18/Java%E5%9F%BA%E7%A1%80-07.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8/"/>
    <id>http://tangxin.club/2015/07/18/Java基础-07.常用命令行大全/</id>
    <published>2015-07-18T06:09:39.283Z</published>
    <updated>2015-07-18T05:52:38.197Z</updated>
    <content type="html"><![CDATA[<h1 id="常用命令行大全">常用命令行大全</h1><ul>
<li><p>创建文件夹<br>  <code>mkdir test</code></p>
</li>
<li><p>进入文件夹<br>  <code>cd test</code></p>
</li>
<li><p>显示路径<br>  在需要显示的文件夹中执行 <code>pwd</code></p>
</li>
<li><p>创建空文件<br>  <code>touch fileName</code></p>
</li>
<li><p>查看文本内容<br>  <code>cat xxx.txt</code></p>
</li>
<li><p>删除文件<br>  <code>rm xxx.txt</code><br>  <code>rm -rf file</code>// -fr表示递归和强制，一定要小心使用 rm -fr / 那你的电脑就over了</p>
</li>
<li><p>拷贝<br>  <code>cp -R 源文件  目标文件</code>// -R 表示对目录进行递归操作</p>
</li>
<li><p>移动<br>  <code>mv filePath toPath</code></p>
</li>
<li><p>显示当前目录的路径名<br>  在目录中执行<code>pwd</code>    </p>
</li>
<li><p>查看文件内容<br>  <code>cat fileName</code></p>
</li>
<li><p>清楚命令行内容<br>  <code>clear</code></p>
</li>
<li><p>显示日期<br>  <code>date</code></p>
</li>
<li><p>显示文件<br>  <code>ls</code><br>  <code>ls -a</code>// 显示隐藏文件<br>  <code>ls -l</code>列出详细信息</p>
</li>
<li><p>关机<br>  <code>sudo shutdown -h now</code>// -h 是关闭电源 now立即关机<br>  <code>sudo shutdown -r now</code>//重启<br>  <code>sudo shutdown -h -time 60</code>// 表示60分钟后关机，注意单位是分钟      </p>
</li>
</ul>
<hr>
<ul>
<li>邮箱 ：charon.chui@gmail.com  </li>
<li>Good Luck! </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="常用命令行大全">常用命令行大全</h1><ul>
<li><p>创建文件夹<br>  <code>mkdir test</code></p>
</li>
<li><p>进入文件夹<br>  <code>cd test</code></p>
</li>
<li><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tangxin.club/2015/07/18/Java%E5%9F%BA%E7%A1%80-06.%E5%8D%95%E4%BE%8B%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://tangxin.club/2015/07/18/Java基础-06.单例的最佳实现方式/</id>
    <published>2015-07-18T06:09:35.879Z</published>
    <updated>2015-07-18T05:52:38.197Z</updated>
    <content type="html"><![CDATA[<h1 id="单例的最佳实现方式">单例的最佳实现方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Private constructor prevents instantiation from other classes</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	* SingletonHolder is loaded on the first execution of Singleton.getInstance() </span><br><span class="line">	* or the first access to SingletonHolder.INSTANCE, not before.</span><br><span class="line">	*/</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123; </span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>邮箱 ：charon.chui@gmail.com  </li>
<li>Good Luck! </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="单例的最佳实现方式">单例的最佳实现方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span clas]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tangxin.club/2015/07/18/Java%E5%9F%BA%E7%A1%80-04.RMB%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/"/>
    <id>http://tangxin.club/2015/07/18/Java基础-04.RMB大小写转换/</id>
    <published>2015-07-18T06:09:27.633Z</published>
    <updated>2015-07-18T05:52:38.195Z</updated>
    <content type="html"><![CDATA[<h1 id="RMB大小写转换">RMB大小写转换</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RenMingBi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'零'</span>, <span class="string">'壹'</span>, <span class="string">'贰'</span>, <span class="string">'叁'</span>, <span class="string">'肆'</span>, <span class="string">'伍'</span>, <span class="string">'陆'</span>, <span class="string">'柒'</span>, <span class="string">'捌'</span>, <span class="string">'玖'</span> &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] units = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'元'</span>, <span class="string">'拾'</span>, <span class="string">'佰'</span>, <span class="string">'仟'</span>, <span class="string">'万'</span>, <span class="string">'拾'</span>, <span class="string">'佰'</span>, <span class="string">'仟'</span>, <span class="string">'亿'</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(convert(<span class="number">11</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">convert</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        StringBuffer sbf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">int</span> unit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (money != <span class="number">0</span>) &#123;</span><br><span class="line">            sbf.insert(<span class="number">0</span>, units[unit++]);</span><br><span class="line">            System.out.println(sbf.toString());</span><br><span class="line">            <span class="keyword">int</span> number = money % <span class="number">10</span>;</span><br><span class="line">            sbf.insert(<span class="number">0</span>, data[number]);</span><br><span class="line">            money /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sbf.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>邮箱 ：charon.chui@gmail.com  </li>
<li>Good Luck! </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="RMB大小写转换">RMB大小写转换</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://tangxin.club/2015/07/18/Java%E5%9F%BA%E7%A1%80-10.%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <id>http://tangxin.club/2015/07/18/Java基础-10.生产者消费者/</id>
    <published>2015-07-18T06:08:48.184Z</published>
    <updated>2015-07-18T05:52:38.200Z</updated>
    <content type="html"><![CDATA[<h1 id="生产者消费者">生产者消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Resource r = <span class="keyword">new</span> Resource();</span><br><span class="line"></span><br><span class="line">		Producer pro = <span class="keyword">new</span> Producer(r);</span><br><span class="line">		Consumer con = <span class="keyword">new</span> Consumer(r);</span><br><span class="line"></span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">		Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">		Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line"></span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.start();</span><br><span class="line">		t4.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 对于多个生产者和消费者。 为什么要定义while判断标记。 原因：让被唤醒的线程再一次判断标记。 为什么定义notifyAll， 因为需要唤醒对方线程。</span><br><span class="line"> * 因为只用notify，容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待。</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * 生产商品</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (flag)</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">this</span>.name = name + <span class="string">"--"</span> + count++;</span><br><span class="line"></span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">"...生产者.."</span></span><br><span class="line">				+ <span class="keyword">this</span>.name);</span><br><span class="line">		flag = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * 消费商品</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (!flag)</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">"...消费者........."</span></span><br><span class="line">				+ <span class="keyword">this</span>.name);</span><br><span class="line">		flag = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">	Producer(Resource res) &#123;</span><br><span class="line">		<span class="keyword">this</span>.res = res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			res.set(<span class="string">"+商品+"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">	Consumer(Resource res) &#123;</span><br><span class="line">		<span class="keyword">this</span>.res = res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			res.out();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDK1.5 中提供了多线程升级解决方案。 将同步Synchronized替换成现实Lock操作。<br>将Object中的wait，notify notifyAll，替换了Condition对象。 该对象可以Lock锁 进行获取。 该示例中，实现了本方只唤醒对方操作。<br>Lock:替代了Synchronized lock unlock newCondition()<br>Condition：替代了Object wait notify notifyAll await(); signal(); signalAll();</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerDemo2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Resource r = <span class="keyword">new</span> Resource();</span><br><span class="line"></span><br><span class="line">		Producer pro = <span class="keyword">new</span> Producer(r);</span><br><span class="line">		Consumer con = <span class="keyword">new</span> Consumer(r);</span><br><span class="line"></span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">		Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">		Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line"></span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.start();</span><br><span class="line">		t4.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Condition condition_pro = lock.newCondition();</span><br><span class="line">	<span class="keyword">private</span> Condition condition_con = lock.newCondition();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		lock.lock();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (flag)</span><br><span class="line">				condition_pro.await();<span class="comment">// t1,t2</span></span><br><span class="line">			<span class="keyword">this</span>.name = name + <span class="string">"--"</span> + count++;</span><br><span class="line"></span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">"...生产者.."</span></span><br><span class="line">					+ <span class="keyword">this</span>.name);</span><br><span class="line">			flag = <span class="keyword">true</span>;</span><br><span class="line">			condition_con.signal();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			lock.unlock();<span class="comment">// 释放锁的动作一定要执行。</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// t3 t4</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		lock.lock();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (!flag)</span><br><span class="line">				condition_con.await();</span><br><span class="line">			System.out.println(Thread.currentThread().getName()</span><br><span class="line">					+ <span class="string">"...消费者........."</span> + <span class="keyword">this</span>.name);</span><br><span class="line">			flag = <span class="keyword">false</span>;</span><br><span class="line">			condition_pro.signal();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">	Producer(Resource res) &#123;</span><br><span class="line">		<span class="keyword">this</span>.res = res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				res.set(<span class="string">"+商品+"</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Resource res;</span><br><span class="line"></span><br><span class="line">	Consumer(Resource res) &#123;</span><br><span class="line">		<span class="keyword">this</span>.res = res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				res.out();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>邮箱 ：charon.chui@gmail.com  </li>
<li>Good Luck! </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="生产者消费者">生产者消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="lin]]>
    </summary>
    
  </entry>
  
</feed>